// class Solution {
// public:
//     int lastStoneWeight(vector<int>& stones) {
//         int size = stones.size();
//         if(size==1)
//         {
//             return stones[0];
//         }
//          int i=0;
//          int j=1;
//          vector<int>::iterator it1, it2;
//         while(2*size--)
//         {   
//             sort(stones.begin(),stones.end(),greater<>());
          
//             int x = stones[j];
//             int y = stones[i];
           
// //             for(int k=0;k<stones.size();k++)
// //             {
// //                 cout<<stones[k]<<" ";
// //             }
//              stones.push_back(abs(y-x));
//             // cout<<endl;
//             it1 = stones.begin();
//          it2 = stones.begin()+1;
//             // cout<<*it1<<" "<<*it2<<endl;
//             stones.erase(it1,it2+1);
//              // stones.erase(remove(stones.begin(),stones.end(),0));
//             //  for(int k=0;k<stones.size();k++)
//             // {
//             //     cout<<stones[k]<<" ";
//             // }
//             // cout<<endl;
//           if(stones.size()==1)
//           {
//               return stones[0];
//           }
           
      
//         }
//              return stones[0]; 
            
//     }
// };



// Using Priority Queue

class Solution {
public:
    int lastStoneWeight(vector<int>& stones) {
        priority_queue<int> pq(stones.begin(),stones.end());
        while(pq.size()>1){
            int x = pq.top();
            pq.pop();
            int y= pq.top();
            pq.pop();
            pq.push(x-y);
        }
        return pq.top();
    }
};
