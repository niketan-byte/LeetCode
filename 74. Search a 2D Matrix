class Solution {
public:
    // bool search(vector<int>&v,int target)
    // {
    //     int l=0;
    //     int r=v.size()-1;
    //     while(l<=r)
    //     {
    //         int mid = l+(r-l)/2;
    //         if(v[mid]==target)
    //         {
    //             return true;
    //         }
    //         else if(v[mid]>target)
    //         {
    //             r = mid-1;
    //         }
    //         else{
    //             l = mid+1;
    //         }
    //     }
    //     return false;
    // }
//     bool searchMatrix(vector<vector<int>>& matrix, int target) {
//         int m = matrix.size();
//         int n = matrix[0].size();
//         // for(int i=0;i<m;i++)
//         // {
//         //     if(search(matrix[i],target))
//         //     {
//         //         return true;
//         //     }
//         // }
//         // return false;

//          int ulr = 0;
//          int ulc = n-1;
//          while(ulr<m && ulc>=0)
//          {
//              if(matrix[ulr][ulc]==target)
//              {
//                  return true;
//              }
//              else{
//                   if(matrix[ulr][ulc]>target)
//                   {
//                      ulc--;
//                   }
//                   else{
//                         ulr++;
//                   }
//              }
//          }
//       return false;
//     }
// };


    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();
        int low=0;
        int high=n*m-1;
        while(low<=high)
        {
            int mid = low + (high-low)/2;
            if(target==matrix[mid/n][mid%n]){
                return true;
            }
            else if(target>matrix[mid/n][mid%n])
            {
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }

return false;
    }
    };
