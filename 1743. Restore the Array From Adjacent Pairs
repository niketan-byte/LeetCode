class Solution {
public:
    void dfs(unordered_map<int,vector<int>>&mp,int cur, set<int>&vis,vector<int>&ans)
    {
        if(vis.find(cur)!=vis.end())
        {
            return;
        }
        ans.push_back(cur);
        vis.insert(cur);
        for(int x:mp[cur])
        {
            dfs(mp,x,vis,ans);
        }
    }
    vector<int> restoreArray(vector<vector<int>>& adj) {
        vector<int>ans;

        unordered_map<int,vector<int>>mp;
        for(auto arr:adj){
            mp[arr[0]].push_back(arr[1]);
            mp[arr[1]].push_back(arr[0]);
        }
        int head=0;
        for(auto x:mp)
        {
            if(x.second.size()==1)
            {
                head = x.first;
                break;
            }

        }

        set<int>vis;
        dfs(mp,head,vis,ans);
        return ans;
    }
};



