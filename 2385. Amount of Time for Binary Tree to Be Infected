/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,vector<int>>mp;
    void constructGraph(TreeNode* root){
        if(!root){
            return;
        }
        if(root->left){
            mp[root->val].push_back(root->left->val);
            mp[root->left->val].push_back(root->val);
        }
        if(root->right){
            mp[root->val].push_back(root->right->val);
            mp[root->right->val].push_back(root->val);
        }
        constructGraph(root->left);
        constructGraph(root->right);
    }
    int amountOfTime(TreeNode* root, int start) {
        constructGraph(root);
        queue<int>q;
        q.push(start);
        unordered_set<int>vis;
        int mnt=-1;
        while(!q.empty()){
           ++mnt;
           for(int i=q.size();i>0;--i){
               int curr = q.front();
               q.pop();
               vis.insert(curr);
               for(int adj:mp[curr]){
                   if(!vis.count(adj)){
                       q.push(adj);
                   }
               }
           }
        }
        return mnt;
    }
};
