class Solution {
    
private:
    void bfs(int row,int col,vector<vector<int>>&vis,vector<vector<char>>&grid)
    {
         int n=grid.size();
        int m=grid[0].size();
        vis[row][col]=1;
        queue<pair<int,int>>q;
        q.push({row,col});
        while(!q.empty())
        {
            int row = q.front().first;
            int col = q.front().second;
            q.pop(); 
            
            // traverse in the neighbour and mark them if its a land
            // for(int delrow=-1;delrow<=1;delrow++)
            // {
            //     for(int delcol=-1;delcol<=1;delcol++)
            //     {
            
                     int nrow=row-1;
                     int ncol=col;
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='1' && !vis[nrow][ncol])
                    {
                        vis[nrow][ncol]=1;
                        q.push({nrow,ncol});
                    }
                    
                     nrow=row+1;
                     ncol=col;
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='1' && !vis[nrow][ncol])
                    {
                        vis[nrow][ncol]=1;
                        q.push({nrow,ncol});
                    }
                     nrow=row;
                     ncol=col-1;
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='1' && !vis[nrow][ncol])
                    {
                        vis[nrow][ncol]=1;
                        q.push({nrow,ncol});
                    }
                     nrow=row;
                     ncol=col+1;
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='1' && !vis[nrow][ncol])
                    {
                        vis[nrow][ncol]=1;
                        q.push({nrow,ncol});
                    }
           
            //     }
            // }
            
        }
    }
    
public:
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int cnt=0;
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int row=0;row<n;row++)
        {
            for(int col=0;col<m;col++)
            {
                if(!vis[row][col] && grid[row][col]=='1')
                {
                   cnt++;
                   bfs(row,col,vis,grid); 
                }
            }
        }
        return cnt;
    }
};



class Solution {
public:
    int x[4]={1,0,-1,0};
    int y[4]={0,-1,0,1};
    
    void bfs(int i,int j,vector<vector<char>>& grid)
    {
        if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j]!='1')
            
        {
            return;
            
        }
        
        grid[i][j]='2';
        
      bfs( i+1, j,grid);
      bfs( i-1, j,grid);
      bfs( i, j-1,grid); 
      bfs( i, j+1,grid);  
        
    }
        
    
    int numIslands(vector<vector<char>>& grid) {
        int n =grid.size();
        int c =0;
        for(int i =0;i<grid.size();i++)
        {
            for(int j =0;j<grid[0].size();j++)
            {
                if(grid[i][j]=='1')
                     c++;
                   bfs(i,j,grid);
                 
            }
        }
      return c;
         
    }
   
};
 
