class TrieNode {
public:
    bool isComplete;
    TrieNode* child[26]; 
    TrieNode()
    {
    isComplete = false;
    memset(child,0,sizeof(child));
    }
};
class Trie {
public:
   TrieNode* root;
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        TrieNode* node = root;
        for(char ch:word)
        {
            int idx = ch-'a';
            if(node->child[idx]==NULL)
            {
                node->child[idx] = new TrieNode();
            }
                node = node->child[idx];
        }    
            node->isComplete = true;
        
    }
    
    bool search(string word) {
        TrieNode* node=root;
        for(char ch:word)
        {
            int idx = ch-'a';
            if(node->child[idx]==NULL)
            {
                return false;
            }
            node = node->child[idx];
        }
        return node->isComplete;
    }
    
    bool startsWith(string prefix) {
        TrieNode* node=root;
        for(char ch:prefix)
        {
         int idx = ch-'a';
         if(node->child[idx]==NULL)
         {
             return false;
         }
         node=node->child[idx];
          
                 }
                 return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
