class Solution {

public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
       
       // using STL partial_sort
        partial_sort(points.begin(),points.begin()+k,points.end(),[](vector<int>&a,vector<int>&b){
        return a[0]*a[0] + a[1]*a[1] < b[0]*b[0]+b[1]*b[1];
        });
    
    return vector<vector<int>>(points.begin(),points.begin()+k);


    // using priority_queue
    
//     priority_queue<vector<int>,vector<vector<int>>,compare>pq(points.begin(),points.end());
//     vector<vector<int>>ans;
//     for(int i=0;i<k;i++)
//     {
//         ans.push_back(pq.top());
//         pq.pop();
//     }
//     return ans;
//     }
//     private:
//  struct compare{
//    bool operator()(vector<int>&a,vector<int>&b){
//        return a[0]*a[0] + a[1]*a[1] > b[0]*b[0] + b[1]*b[1];
//    }
//    };
};
