// class Solution {
// public:
//     int combination(int n, int r)
// {
//     int ans = 1;
//     for (int i = n; i > n - r; i--)
//     {
//         ans *= i;
//     }
//     for (int i = 1; i <= r; i++)
//     {
//         ans /= i;
//     }
//     return ans;
// }
    
//     vector<vector<int>> generate(int numRows) {
//         int n = numRows;
//         vector<vector<int>> ans;
//          vector<int> res;
        
//         int m;
//         for(int i=1;i<=n;i++)
//     {    res.clear();
//             int k=1;
//             int z=0;
//         for(int j=1;j<=2*n-1;j++)
//         {      
//             if(j>=n-i+1 && j<=n+i-1 && k)
//             {
                
//                 res.push_back(combination(i-1,z));
//                 z++;
//                 k=0;
//             }
//             else{
//                 cout<<" ";
//                 k=1;
//                 }
               
//         }  
//        ans.push_back(res);
//     }
//         return ans;
//     }
// };


// class Solution {
// public:
//     vector<vector<int>> generate(int numRows) {
//        int n = numRows;
//         vector<vector<int>> ans;
//         for(int i=0;i<n;i++)
//         {
//             vector<int> res(i+1,1);
//             for(int j=1;j<i;j++)
//             {
//                 res[j] = ans[i-1][j-1] + ans[i-1][j];
//             }
//             ans.push_back(res);
//         }
//         return ans;
//     }
// };


class Solution {
public:
    vector<vector<int>> generate(int numRows) {
       int n = numRows;
        vector<vector<int>> ans;
        for(int i=0;i<n;i++)
        {
            vector<int> res(i+1,1);
            for(int j=1;j<i;j++)
            {
                res[j] = ans[i-1][j-1] + ans[i-1][j];
            }
            ans.push_back(res);
        }
        return ans;
    }
};
