// class Solution {
// public:
//     vector<string> topKFrequent(vector<string>& words, int k) {

//         priority_queue<pair<string, string>, vector<pair<string, string>>, greater<pair<string, string>>> pq;
//         unordered_map<string, int> cnt;
//         for (auto num : words) cnt[num]++;
//         for (auto kv : cnt) {
//             pq.push({kv.second, kv.first});
//             while (pq.size() > k) pq.pop();
//         }
//         vector<string> res;
//         while (!pq.empty()) {
//             res.push_back(pq.top().second);
//             pq.pop();
//         }
//         return res;
//     }
// };


class Solution {
public:
    class comp{
        public:
        bool operator()(pair<int,string>&a,pair<int,string>&b)
        {
            if(a.first!=b.first)
            {
                return a.first>b.first;
            }
            return a.second<b.second;
        }
    };
    vector<string> topKFrequent(vector<string>& words, int k) {
    priority_queue<pair<int,string>,vector<pair<int,string>>,comp>pq;
        unordered_map<string,int>mp;
        for(auto i:words)
        {
            mp[i]++;
        }
        vector<string>ans;
        for(auto i:mp)
        {
            if(pq.size()<k)
            {
                pq.push({i.second,i.first});
            }
            else{
                if(pq.top().first<i.second)
                {
                    pq.pop();
                    pq.push({i.second,i.first});
                }
                else if(pq.top().first==i.second && pq.top().second>i.first)
                {
                    pq.pop();
                    pq.push({i.second,i.first});
                }
            }
        }
        while(!pq.empty())
        {
            ans.push_back(pq.top().second);
            pq.pop();
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
