class Solution {
       
public:

    void swap(int &a,int &b)
    {
        a = a+b; 
        b=a-b;
        a=a-b;
    }
   void rotate(vector<vector<int>>& matrix) {
   int n = matrix.size();
   int m = matrix[0].size();
        
       reverse(matrix);
       
       // transpose
        for(int row=0;row<n;row++)
        {
            for(int col=row+1;col<m;col++)
            {
                swap(matrix[row][col],matrix[col][row]);
            }
        }
    }
    void reverse(vector<vector<int>>& matrix)
    {
    int n = matrix.size();
   int m = matrix[0].size();
       for(int col=0;col<m;col++)
       {
           for(int row=0;row<n/2;row++)
           {
               swap(matrix[row][col],matrix[n-1-row][col]);
               
           }
       }
    }
};



// Simple 

// 90: Transpose + Reverse Rows
// 180: Reverse Rows + Reverse columns or two time 90 degree
// 270 : Transpose + Reverse Columns or negative of 90 degree (first do reverse and than transpose)

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
    
    
    // Transpose
       for(int i=0;i<matrix.size();i++)
       {
           for(int j=i;j<matrix.size();j++)
           {
               swap(matrix[i][j],matrix[j][i]);
           }
       }
      
      // Swapping coloumns (reverse)
       for(int i=0;i<matrix.size();i++){
       int st=0;
       int end=matrix.size()-1;
       while(st<=end)
       {
           swap(matrix[i][st],matrix[i][end]);
           st++;
           end--;
       } 
       }
    }
};
