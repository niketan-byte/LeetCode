/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
//         ListNode* slow=head,*fast=head;
//         while(fast && fast->next)
//         {
//             slow=slow->next;
//             fast=fast->next->next;
//             if(fast==slow)
//             {
//                 break;
//             }
//         }
//         if(!(fast && fast->next))
//         {
//             return NULL;
//         }
//         fast=head;
//         while(fast!=slow)
//         {
//             fast=fast->next;
//             slow=slow->next;
//         }
// return fast;
if(!head || !head->next)
{
    return NULL;
}
ListNode* slow=head;
ListNode* fast=head;
ListNode* entry=head;
while(fast->next && fast->next->next)
{
    slow=slow->next;
    fast = fast->next->next;
    if(fast==slow)
    {   
      while(entry!=slow)
      {
        slow=slow->next;
        entry = entry->next;
      }
      return entry;
    }
}
return NULL;
    }
};
