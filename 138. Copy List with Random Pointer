/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        // brute force 
    //    map<Node*,Node*>mp;
    //    Node* temp=head;
    //    while(temp)
    //    {
    //        Node* copy=new Node(temp->val);
    //        mp[temp]=copy;
    //        temp=temp->next;
    //    }
    //    temp=head;
    //    while(temp)
    //    {
    //        mp[temp]->next = mp[temp->next];
    //        mp[temp]->random = mp[temp->random];
    //        temp=temp->next;
    //    }
    //    return mp[head];

        
    Node* temp=head;
    // 1. copy 
    while(temp)
    {
        Node* copy = new Node(temp->val);
        copy->next=temp->next;
        temp->next=copy;
        temp = temp->next->next;
    }


    // 2. random pointer
     Node* itr = head;
     while(itr)
     {
         if(itr->random!=NULL)
         {
             itr->next->random = itr->random->next;
         }
         itr = itr->next->next;
     }

     // 3. arrangement
     Node* dummy = new Node(0);
     Node* frwd=head;
     Node* tail = dummy;
     while(frwd)
     {
         tail->next = frwd->next;
         tail = tail->next;
         frwd->next = tail->next;
         frwd = frwd->next;
     }

   return dummy->next;
    }
};
