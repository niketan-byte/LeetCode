/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// public:
//     TreeNode* addOneRow(TreeNode* root, int val, int depth) {
//        if(depth==1)
//        {
//            TreeNode* newroot = new TreeNode(val);
//            newroot->left=root;
//            return newroot;
//        }
//         else if(depth==0)
//         {
//            TreeNode* newroot = new TreeNode(val);
//            newroot->right=root;
//            return newroot;   
//         }
//         if(!root)
//         {
//             return nullptr;
//         }
//         else if(depth==2)
//         {
//             root->left = addOneRow(root->left,val,1);
//             root->right = addOneRow(root->right,val,0);
//         }
//         else if(depth>2)
//         {
//          root->left = addOneRow(root->left,val,depth-1);
//          root->right = addOneRow(root->right,val,depth-1);
//         }
//         return root;
//     }
// };


class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
       if(depth==1)
       {
           TreeNode* newroot = new TreeNode(val);
           newroot->left=root;
           return newroot;
       }
    
        queue<TreeNode*>q;
        q.push(root);
        int cntlevel=0;
        
        while(!q.empty())
        {
            int n = q.size();
            cntlevel++;
            while(n--)
            {
                TreeNode* curr = q.front();
                q.pop();
                if(cntlevel!=depth-1)
                {
                    if(curr->left)
                    {
                        q.push(curr->left);
                    }
                    if(curr->right)
                    {
                        q.push(curr->right);
                    }
                }
                else{
                    TreeNode* newNode = new TreeNode(val);
                    newNode->left = curr->left;
                    curr->left=newNode;
                    
                    TreeNode* newNode1 = new TreeNode(val);
                    newNode1->right = curr->right;
                    curr->right = newNode1;
                }
            }
        }
        return root;
    }
};
