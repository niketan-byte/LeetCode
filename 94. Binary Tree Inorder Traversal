/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// recursive 
// class Solution {
// public:
//       vector<int>res;
//     vector<int> inorderTraversal(TreeNode* root) {
      
//         if(root==NULL)
//         {
//             return {};
//         }
//         inorderTraversal(root->left);
//         res.push_back(root->val);
//         inorderTraversal(root->right);
        
//         return res;

//     }
// };


// iterative
class Solution{
    public:
     vector<int> inorderTraversal(TreeNode* root) {
     vector<int>res;
     stack<TreeNode*>s;
     while(!s.empty() || root)
     {
         while(root)
         {
             s.push(root);
             root=root->left;
         }
         root = s.top();
         s.pop();
         res.push_back(root->val);
         root = root->right;
     }
         return res;
     }
};


class Solution {
public:
    void helper(TreeNode* root, vector<int>&ans){
            if(root==NULL){
                return ;
            }
            if(root->left){
            helper(root->left,ans);
        }
        ans.push_back(root->val);
        if(root->right){
            helper(root->right,ans);
        }
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>ans;
helper(root,ans);       
        return ans;
        
    }
};
