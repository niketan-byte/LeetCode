class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
    //     int farest=0;
    //     int ans=0,i=0;
    //     int maxReach=0;
    //    while(farest<n-1)
    //    {
    //        maxReach= max(maxReach,i+nums[i]);
    //        if(i==farest)
    //        {
    //            farest = maxReach;
    //            ans++;
    //        }
    //        i++;
    //    }
    //    return ans;


    vector<int>dp(n,INT_MAX);
    dp[0]=0;
    for(int i=0;i<n;i++)
    {
        int m=nums[i];
        for(int j=1;j<=m && i+j<n;j++)
        {
            dp[i+j] = min(dp[i]+1,dp[i+j]);
        }
    }
    return dp[n-1];
    }
};

