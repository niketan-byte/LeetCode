class Solution {
public:
    void dfs(int i,int j,vector<vector<int>>&grid)
    {
         int m = grid.size();
        int n = grid[0].size();
        if(i<0 || j<0 || i>=m || j>=n || grid[i][j]!=0)
        {
            return;
        }
        grid[i][j]=1;
        dfs(i,j-1,grid);
        dfs(i+1,j,grid);
        dfs(i,j+1,grid);
        dfs(i-1,j,grid);
    }
    int closedIsland(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if((i*j==0 || i==m-1 || j==n-1) && grid[i][j]==0)
                {
                    dfs(i,j,grid);
                }
            }
        }
        int cnt=0;
        for(int i=1;i<m-1;i++)
        {
            for(int j=1;j<n-1;j++)
            {
                if(grid[i][j]==0)
                {
                    dfs(i,j,grid);
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
