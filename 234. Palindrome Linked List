/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode *temp=head;
        int cnt=0;
        while(temp!=NULL)
        {
            temp = temp->next;
            cnt++;
        }
     
       ListNode *prev=NULL,*curr;
        temp=head;
        int n=cnt/2;
        
        while(n--)
        {
            curr = temp;
            temp = temp->next;
            curr->next=prev;
            prev = curr;
        }
      
        // temp=prev;
        // while(temp!=NULL)
        // {
        //     cout<<temp->val<<" ";
        //     temp=temp->next;
        // }
        
        if(cnt%2)
        {
            temp=temp->next;
        }
       
            ListNode *t=prev;
         while(temp!=NULL)
         {
             if( (t!=NULL) &&(t->val == temp->val))
             {
                 t=t->next;
                 temp=temp->next;
             }
             else{
                 return 0;
             }
        }
        return 1;
    }
};
