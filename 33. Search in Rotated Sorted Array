// class Solution {
// public:
//     int search(vector<int>& nums, int target) {
      
//         for(int i=0;i<nums.size();i++)
//        {
//            if(nums[i]==target)
//            {
//                return i;   
//            }
//        }
//         return -1;
//     }
// };


// class Solution {
// public:
//     int search(vector<int>& nums, int target) {
//        int high,low;
//         low=0;
//         high=nums.size()-1;
        
//         while(low<high)
//         {
//             int mid = low + (high-low)/2;
//             if(nums[mid]>nums[high])
//             {
//                 low=mid+1;
//             }
//             else{
//                 high=mid;
//             }
//         }
        
//         int st = low;
//         int end = high;
//         low=0;
//         high = nums.size()-1;
//         if(nums[st]<=target && nums[end]>=target)
//         {
//             low = st;
//         }
//         else{
//            high = st; 
//         }
        
// //         if (target >= nums[0]) {
// //     high = st-1; 
// // } 
// //         else {
// //     low = st;
// // }
        
        
//         while(low<=high)
//         {
//             int mid = low + (high-low)/2;
            
//             if(nums[mid]==target)
//             {
//                 return mid;
//             }
//             else if(nums[mid]>target)
//             {
//                 high = mid-1;
//             }
//             else{
//                 low = mid+1;
//             }
//             cout<<low<<" "<<mid<<" "<<high<<endl;
//         }
    
//         return -1;
//     }
// };





class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low=0,high=nums.size()-1;
        while(low<high)
        {
            int mid = (low+high)/2;
            if(nums[mid]>nums[high])
            {
                low=mid+1;
            }
            else{
                high=mid;
            }
        }
        int rot=low;
        low=0;high=nums.size()-1;
          while(low<=high){
            int mid=(low+high)/2;
            int realmid=(mid+rot)%nums.size();
            if(nums[realmid]==target)return realmid;
            if(nums[realmid]<target)low=mid+1;
            else high=mid-1;
        }
        return -1;
    }
};
