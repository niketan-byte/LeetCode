class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> res; res.push_back(nums[0]);
        for(int i=1;i<nums.size();i++){
            int p=nums[i];
            if(p>res.back())
                {res.push_back(p);continue;}
            int idx=lower_bound(res.begin(),res.end(),p)-res.begin();
            if(idx==res.size()) 
                continue;
            res[idx]=p;
        }
        return res.size();
    }
};

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
    int n = nums.size();
        if (n == 0) {
            return 0;
        }

        vector<int> dp(n, 1);

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }

        return *max_element(dp.begin(), dp.end());
    }
};
