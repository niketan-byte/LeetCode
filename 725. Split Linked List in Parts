/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*>vec(k,NULL);
        int cnt=0;
        ListNode* temp=head;
        while(temp!=NULL)
        {
            cnt++;
            temp = temp->next;
        }                
        
        // Calculate the minimum guaranteed part size (n) and the number of extra nodes (r).
        int n = cnt/k;
        int rem = cnt%k;
        ListNode* node = head, *prev=NULL;
        for(int i=0;node && i<k;i++,rem--)
        {
           vec[i]=node;
          // Traverse n + 1 nodes if there are remaining extra nodes (r > 0).
        // Otherwise, traverse only n nodes.
           for(int j=0;j<n + (rem>0);j++)
        {
            prev=node;
            node = node->next;
        }
            prev->next=NULL;
            // disconnect
        }
        return vec;
    }
};
