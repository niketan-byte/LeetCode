class Solution {
public:

/// DFS
     vector<vector<int>> ans;
    void helper(TreeNode *root,int level){
        if(root==NULL)
        {
            return ;
        }
        if(ans.size()==level)
        {
            ans.push_back(vector<int>());
        }
        ans[level].push_back(root->val);
        helper(root->left,level+1);
        helper(root->right,level+1);
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
        helper(root,0);
        return ans;
    }
};



/// BFS
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(!root)
        {
            return {};
        }
        queue<TreeNode*>q;
        q.push(root);
        vector<vector<int>>ans;
        while(!q.empty())
        {
            int sz=q.size();
            vector<int>vec(sz);
            for(int i=0;i<sz;i++)
            {
                TreeNode* temp = q.front();
                q.pop();
                vec[i] = temp->val;
                if(temp->left)
                {
                    q.push(temp->left);
                }
                   if(temp->right)
                {
                    q.push(temp->right);
                }
            }
            ans.push_back(vec);
        }
        return ans;
    }
};
