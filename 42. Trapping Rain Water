class Solution {
public:
    int trap(vector<int>& height) {
      // brute force
/*
        int ans=0;
        int n = height.size();
        vector<int>left(n);
        vector<int>right(n);
        left[0]=height[0];
        right[n-1]=height[n-1];
        for(int i=1;i<n;i++)
        { 
            left[i] = max(left[i-1],height[i]);
            right[n-i-1] = max(right[n-i],height[n-i-1]);
        }

        for(int i=0;i<n;i++)
        {
            int water = min(left[i],right[i]);
            if(water>=height[i])
            {
                ans += water-height[i];
            }
        }
        return ans;
    */

    // int n=height.size();
    // int left=0,right=n-1;
    // int ans=0;
    // int leftmax=INT_MIN,rightmax=INT_MIN;
    // while(left<=right)
    // {
    //   if(height[left]<=height[right])
    //   {
    //       // update of two things
    //     // 1. left max
    //     // 2. ans
    //     leftmax = max(leftmax,height[left]);
    //     ans += leftmax-height[left];
    //     left++;
    //   }
    //   else{
    //      rightmax = max(rightmax,height[right]);
    //     ans += rightmax-height[right];
    //     right--;
    //   }
    // }
    //     return ans;

    int n=height.size();
    auto left=height.begin(),right=height.end()-1;
    int level=0,water=0;
    while(left<=right)
    {
        int lower = *left < *right ? *left++ : *right--;
        level = max(level,lower);
        water += level-lower;
    }
return water;
    }
};
