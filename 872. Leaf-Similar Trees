/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        if(root1==NULL || root2==NULL)
       {
           return false;
       }
      else{
        vector<int>v1;
        vector<int>v2;
        stack<TreeNode*>s1;
        stack<TreeNode*>s2;
        s1.push(root1);
        s2.push(root2);
        while(s1.size()!=0)
        {
            TreeNode* curr=s1.top();
            s1.pop();
            if(curr->left==NULL && curr->right==NULL)
            {
             v1.push_back(curr->val);
            }
            if(curr->left!=NULL)
            {
                s1.push(curr->left);
            }
            if(curr->right!=NULL)
            {
                s1.push(curr->right);
            }
        }
        
        while(s2.size()!=0)
        {
            TreeNode* curr=s2.top();
            s2.pop();
            if(curr->left==NULL && curr->right==NULL)
            {
                v2.push_back(curr->val);
            }
            if(curr->left!=NULL)
            {
                s2.push(curr->left);
            }
               if(curr->right!=NULL)
            {
                s2.push(curr->right);
            }
        }
        if(v1.size()!=v2.size())
        {
            return false;
        }
       if(v1.size()==v2.size())
       {
           for(int i=0;i<v1.size();i++)
           {
               if(v1[i]!=v2[i])
               {
                   return false;
                   break;
               }
           }
           return true;
       }
      }
      return 0;
    }
};
