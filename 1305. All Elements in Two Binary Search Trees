/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     vector<int>t1;
     vector<int>t2;    
     vector<int>ans;
     int count1=0;
     int count2=0;
     int i=0;
     int j=0;
    void inorder1(TreeNode* root)
    {
        if(root==NULL)
        {
            return;
        }
        // ans.push_back(root->val);
        inorder1(root->left);
        t1.push_back(root->val);
        inorder1(root->right);
        count1++;
    }
     void inorder2(TreeNode* root)
    {
        if(root==NULL)
        {
            return;
        }
        // ans.push_back(root->val);
        inorder2(root->left);
        t2.push_back(root->val);
        inorder2(root->right);
        count2++;
    }
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        inorder1(root1);
        inorder2(root2);
     
        while(i<count1 && j<count2)
        {
            if(t1[i]<=t2[j] && i<=count1-1)
            {
                ans.push_back(t1[i]);
                i++;
             
            }
            
            else if(t1[i]>=t2[j] && j<=count2-1)
            {
                ans.push_back(t2[j]);
                j++;
               
            }
      
        }
        
     
            while(i!=count1){
            ans.push_back(t1[i]);
                i++;}
            
        
            while(j!=count2){
            ans.push_back(t2[j]);
            j++;
        }
        
        return ans;
        
    }
};
