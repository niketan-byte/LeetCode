// class Solution {
// public:
//     int splitArray(vector<int>& nums, int m) {
//         int k=nums.size()/m;
//         int mx = INT_MIN;
//         int sum=0;
//         // sort(nums.begin(),nums.end());
//         for(int i=0;i<k;i++)
//         {
//             sum += nums[i];
//             mx = max(mx,sum);
//             cout<<mx<<" ";
//         }
//          cout<<endl;
//         sum=mx;
//         for(int i=k;i<nums.size()-k;i++)
//         {
//             sum += nums[i]-nums[i-k];
//             mx = max(mx,sum);
//               cout<<mx<<" ";
//         }
//           cout<<endl;
//         int s=0;
//         for(int i=nums.size()-k;i<nums.size();i++)
//         {
//             s += nums[i];
            
//         }
//         mx =max(mx,s);
//         return mx;
//     }
// };



class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
    int l = 0, r=0,n=nums.size();
        l=*max_element(nums.begin(),nums.end());
        r=accumulate(nums.begin(),nums.end(),0);
       
    int ans=0;
        
    // Binary Search
    
    while(l<=r)
    {
        int mid = (l+r)/2;
        int count=0,tempSum=0;
        
        for(int i=0;i<n;i++)
        {
             if(tempSum+nums[i]<=mid) 
             {
                 tempSum+=nums[i];
                 // cout<<tempSum<<" ";
             }
            else{
                count++;
                tempSum=nums[i];
            }
        
        }
        count++;
         if(count<=m) 
         {
          r=mid-1;
          ans=mid;
         }
         else 
         {
             l=mid+1;
         }
    }
        return ans;
    }
};

