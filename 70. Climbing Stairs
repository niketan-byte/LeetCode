class Solution {
public:
    int climbStairs(int n) {
    // base cases
    if(n <= 0) return 0;
    if(n == 1) return 1;
    if(n == 2) return 2;
    
    int one_step_before = 2;
    int two_steps_before = 1;
    int all_ways = 0;
    
    for(int i=2; i<n; i++){
    	all_ways = one_step_before + two_steps_before;
    	two_steps_before = one_step_before;
        one_step_before = all_ways;
    }
    return all_ways;
}
};

class Solution {
public:
    int climbStairs(int n) {
        vector<long>vec(47,0);
        vec[0]=0;
        vec[1]=1;
        vec[2]=1;
        for(int i=3;i<=46;i++)
        {
            vec[i]=vec[i-1]+vec[i-2];
        }
        return vec[n+1];  
    }
};


class Solution {
public:
    int climbStairs(int n) {
        if(n==1 || n==2){
            return n;
        }
    //  vector<int>vec(n,0);
     
    //  vec[0] = 1;
    //  vec[1] = 2;
    //  for(int i=2;i<n;i++){
    //      vec[i] = vec[i-1]+vec[i-2];
    //  }
    //  return vec[n-1];
    int a = 1;
    int b = 2;
    int c;
    for(int i=2;i<n;i++){
        c = a+b;
        a = b;
        b = c;
    }
    return c;
    }
};
