// O (n^3)
// class Solution {
// public:
//     int mod=1000000007;
//     int sumSubarrayMins(vector<int>& arr) {
//         int n=arr.size();
//         int sum=0;
//        for(int i=0;i<n;i++)
//        {
//            for(int j=i;j<n;j++)
//            {   int b=INT_MAX;
//                for(int k=i;k<=j;k++)
//                {
//                    int a = arr[k];
//                     b = min(a,b);
//                }
//                sum = (sum+b)%mod;
//            }
//        } 
//        return sum;
//     }
// };

// O (n^2)
// class Solution {
// public:
//     int mod=1000000007;
//     int sumSubarrayMins(vector<int>& arr) {
//         int n = arr.size();
//         long long sum=0;
//         for(int i=0;i<n;i++)
//         {
//             int m = arr[i]%mod;
//             for(int j=i;j<n;j++)
//             {
//                 m = min(m,arr[j]);
//                 sum = (sum+m)%mod;
//             }
//         }
//     return sum;
//     }
// };


// O (n)
class Solution {
public:
    int mod=1000000007;
    int sumSubarrayMins(vector<int>& arr) {
 stack<int> st;
            int ans = 0;

            int n = arr.size();
            for (int i = 0; i <= arr.size(); i++)
            {
                while (!st.empty() && (i == n || arr[st.top()] >= arr[i]))
                {
                    int idx = st.top();
                    st.pop();

                    long right = i < n ? i - idx : n - idx;
                    long left = st.empty() ? idx + 1 : idx - st.top();

                    ans = (ans + left *right *arr[idx]) % mod;
                }
                st.push(i);
            }

            return ans;
        }
};
