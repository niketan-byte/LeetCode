class Solution {
public:
 int minOperations(vector<int>& nums, int X) {
        int n = nums.size();
        int targetSum = accumulate(nums.begin(), nums.end(), 0) - X;

        if (targetSum < 0) {
            return -1; // If it's not possible to reach the target sum
        }

        if (targetSum == 0) {
            return n; // If the target sum is the sum of all elements, return n
        }

        int maxLength = -1;
        int currentSum = 0;
        int left = 0;

        for (int right = 0; right < n; ++right) {
            currentSum += nums[right];

            while (currentSum > targetSum) {
                currentSum -= nums[left];
                left++;
            }

            if (currentSum == targetSum) {
                maxLength = max(maxLength, right - left + 1);
            }
        }

        return maxLength != -1 ? n - maxLength : -1;
    }
};
